The application in this repository is described in the paper: "REINVENT 2.0 â€“ an AI tool for de novo drug design"
=================================================================================================================

Usage
-----

1. Templates for inputs are provided in reinvent/data/examples/templates folder. More examples will follow.
2. There are templates for 6 running modes. Each running mode can be esecuted by "python input.py some_running_mode.json".
Templates have to be eddited accordingly before using. The only thing that needs modification for a standard run are the file and folder paths. Most running modes produce logs that can be monitored by tensorboard, see below. 
   * Logging folder is defined by setting a valid path to the "logging_path" field in json. This is valid for all running modes.
3. Running modes:
   * Sampling: sampling.json can be used to start sampling. Reqires a generative model as an input and produces a file that contains SMILES. We provide a generative model "reinvent/data/augmented.prior". Altrnatively focused Agents generated by transfer learning or reinforcement learning can be sampled as well.
   * Transfer Learning (TL): transfer_learning.json is the relevant template and it can be used to focus the general prior towards a narrow chemical space by training on a representative sample of smiles provided by user. Requires as an input a list of smiles (example format in "reinvent/data/smiles.smi") and the generative model "reinvent/data/augmented.prior". The result will be a set of generative Agent checkpoints produced after each epoch of training and a final focused Agent. Inspect the tensorboard logs to estimate which Agent has the level of focusing that you prefer.
   * Reinforcement Learning (RL): Use reinforcement_learning.json as a template. The general input requires paths for both Agent and Prior generative models (in "reinforcement_learning" section of json). Both can be the model provided by us "reinvent/data/augmented.prior" or alternatively the user can provide a focused Agent generated by TL. The output is a focused generative model and "scaffold_memory.csv" file which contains the best scoring SMILES during the RL run. The output folder is defined by setting a value for "resultdir". The scoring function object "scoring_function" can be either "name": "custom_product" or "name": "custom_sum". Scoring function has a list of parameters "parameters":[] which may contain any number of component objects.


-------------------------------------------------
To use Tensorboard for logging:

   1. To launch Tensorboard, you need a graphical environment like VDI. Write:
       tensorboard --logdir "path to your log output directory" --port=8008.
       This will give you an address to copy to a browser and access to the graphical summaries from Tensorboard.

   2. Further commands to Tensorboard to change the amount of scalars,histograms, images, distributions and graphs shown
        can be done as follows:
        --samples_per_plugin=scalar=700, images=20

Installation
-------------

1. Install Anaconda / Miniconda
2. Clone the repository
3. Open terminal, go to the repository and generate the appropriate environment:
    conda env create -f reinvent_shared.yml
4. To set environmental variables (currently not needed), for example a license:
   On the command line, first:

       cd $CONDA_PREFIX
       mkdir -p ./etc/conda/activate.d
       mkdir -p ./etc/conda/deactivate.d
       touch ./etc/conda/activate.d/env_vars.sh
       touch ./etc/conda/deactivate.d/env_vars.sh

   then edit ./etc/conda/activate.d/env_vars.sh as follows:

       #!/bin/sh
       export SOME_LICENSE='/path/to/your/license/file'

   and finally, edit ./etc/conda/deactivate.d/env_vars.sh :

       #!/bin/sh
       unset SOME_LICENSE
5. Activate environment: conda activate reinvent_shared.v2.1
6. In the project directory, in ./configs/ create the file `config.json` by copying over `example.config.json` and editing as required. 
   In the current version this is only relevant for the unit tests. 


Tests - currently the number of tests is significantly reduced for this repo.
-----
Before running unit tests make sure to set up your config.json. Use the provided configs/example.config.json  and rename it to configs/config.json.
The tests can be executed using Unittest:
```
python -m unittest
```

Or using Pytest:
```
python -m pytest unittest_reinvent
```

Integration tests are decorated with `@pytest.mark.integration`. You can easily skip integration tests using pytest mark expression (`-m` argument):
```
python -m pytest -m "not integration" --strict-markers unittest_reinvent/
```
